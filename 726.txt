*객체지향프로그램 
 : 프로그래밍에서 필요한 데이터를 추상화 시켜 상태와 행위를 가진 객체로 만들고,
   객체들간의 상호작용을 통해 로직을 구성하는 프로그래밍 방법
          ↕
 절차지향프로그램
--------------------------------------------------------------------------------------
*객체지향프로그램 5개
상속,추상화,다형성,캡슐화,정보입력
--------------------------------------------------------------------------------------
*클래스
연관된 인스턴스들의 묶음 
--------------------------------------------------------------------------------------
*exception - Throwable, JSP가 page 지시자 태그의 isErrorPage=true일 경우만 생성됨
=>try~catch
디버깅 검증!
--------------------------------------------------------------------------------------
*에러코드
200 : 요청 성공적으로 수행
403 : 접근 금지, 디렉터리 리스칭 요청 및 관리자 페이지 접근 등을 차단하는 경우
404 : 요청한 페이지가 없음
500 : 내부 서버 오류
-> try~catch로 안하면 자바 컴파일러가 잡아줌
=>에러페이지의 우선순위
1.page 내 try - catch 구문
2.page 디렉티브에서 지정한 errorPage
3.web.xml에서 지정한 exception-type
4.web.xml에서 지정한 error code
5.웹 컨테이너가 제공하는 기본 에러 페이지
 --> 특별한 경우 3번을 사용하고 일반적 경우에는 4번을 주로 사용한다.

=> <%=exception.getMessage() %>
	exception 사용시 isErrorPage="true" 필요
--------------------------------------------------------------------------------------
*메소드와 함수의 차이
: 호출 방식에 따라 다르다. 
  함수를 호출하는 객체가 있는 경우 메소드라고 말하며,
  함수를 호출하는 객체가 없는 경우 함수라고 말한다.
--------------------------------------------------------------------------------------
*main 메소드가 돌아가려면?!
1.본인의 이름과 같은 class만 사용
2.public 이어야함
-> public static void main(){}
--------------------------------------------------------------------------------------
*try~catch 상속 관계
--------------------------------------------------------------------------------------
*오버로딩 허용 조건
1.하나의 클래스에 정의되어야 한다
2.메소드명이 동일하다
3.매개변수가 다르다
    -매개변수 개수가 다르다
    -자료형이 다르다
    -위치가 다르다

<오버로딩 사용 이유>
-> 메모리 아끼려고
-> 비슷한 기능의 이름이 헷갈리지 않으려고
--------------------------------------------------------------------------------------
*오버라이딩
상속관계에서,
부모클래스에 있는 메소드를 자식클래스 내에서 재정의 하는것
<안될때>(선언시에만 값을 넣을 수 있다.)
-static
-final(상수화)
	final이 걸린 멤버변수 값을 초기화하는 구간
	(1)생성시
	(2)선언

<오버라이딩 사용 이유>
-> 다형성(오버라이딩이 성립되지 않으면 다형성 x)
--------------------------------------------------------------------------------------
*제어문
: 프로그램의 흐름을 제어하는 경우에 사용하는
 실행문으로, 조건문, 반복문, 분기문 등이 포함
 (건너뛰거나 다시 되돌아옴)
 -조건문 if(구간)switch(값)
 -반복문 for(초기값,조건,증가)-일정횟수반복, 
            while(조건식)-횟수정해지지않을때
--------------------------------------------------------------------------------------
*연산자
: 연산항을 가지고 계산하여 결과값을 돌려줌
--------------------------------------------------------------------------------------
*변수
:하나의 값을 저장할 수 있는 기억공간
--------------------------------------------------------------------------------------
JDK(자바 개발환경) : 툴
JRE(자바 실행환경) 
이클립스는 환경변수를 프로젝트마다 다르게 설정 가능




